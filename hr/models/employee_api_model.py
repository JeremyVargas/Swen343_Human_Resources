# coding: utf-8

"""
    Human Resources API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EmployeeApiModel(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, is_active=None, employee_id=None, name=None, birth_date=None, address=None, department=None, role=None, team_start_date=None, company_start_date=None, salary=None):
        """
        EmployeeApiModel - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'is_active': 'bool',
            'employee_id': 'int',
            'name': 'str',
            'birth_date': 'str',
            'address': 'str',
            'department': 'str',
            'role': 'str',
            'team_start_date': 'str',
            'company_start_date': 'str',
            'salary': 'int'
        }

        self.attribute_map = {
            'is_active': 'is_active',
            'employee_id': 'employee_id',
            'name': 'name',
            'birth_date': 'birth_date',
            'address': 'address',
            'department': 'department',
            'role': 'role',
            'team_start_date': 'team_start_date',
            'company_start_date': 'company_start_date',
            'salary': 'salary'
        }

        self._is_active = is_active
        self._employee_id = employee_id
        self._name = name
        self._birth_date = birth_date
        self._address = address
        self._department = department
        self._role = role
        self._team_start_date = team_start_date
        self._company_start_date = company_start_date
        self._salary = salary

    @property
    def is_active(self):
        """
        Gets the is_active of this EmployeeApiModel.

        :return: The is_active of this EmployeeApiModel.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """
        Sets the is_active of this EmployeeApiModel.

        :param is_active: The is_active of this EmployeeApiModel.
        :type: bool
        """

        self._is_active = is_active

    @property
    def employee_id(self):
        """
        Gets the employee_id of this EmployeeApiModel.

        :return: The employee_id of this EmployeeApiModel.
        :rtype: int
        """
        return self._employee_id

    @employee_id.setter
    def employee_id(self, employee_id):
        """
        Sets the employee_id of this EmployeeApiModel.

        :param employee_id: The employee_id of this EmployeeApiModel.
        :type: int
        """

        self._employee_id = employee_id

    @property
    def name(self):
        """
        Gets the name of this EmployeeApiModel.

        :return: The name of this EmployeeApiModel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this EmployeeApiModel.

        :param name: The name of this EmployeeApiModel.
        :type: str
        """

        self._name = name

    @property
    def birth_date(self):
        """
        Gets the birth_date of this EmployeeApiModel.

        :return: The birth_date of this EmployeeApiModel.
        :rtype: str
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date):
        """
        Sets the birth_date of this EmployeeApiModel.

        :param birth_date: The birth_date of this EmployeeApiModel.
        :type: str
        """

        self._birth_date = birth_date

    @property
    def address(self):
        """
        Gets the address of this EmployeeApiModel.

        :return: The address of this EmployeeApiModel.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """
        Sets the address of this EmployeeApiModel.

        :param address: The address of this EmployeeApiModel.
        :type: str
        """

        self._address = address

    @property
    def department(self):
        """
        Gets the department of this EmployeeApiModel.

        :return: The department of this EmployeeApiModel.
        :rtype: str
        """
        return self._department

    @department.setter
    def department(self, department):
        """
        Sets the department of this EmployeeApiModel.

        :param department: The department of this EmployeeApiModel.
        :type: str
        """

        self._department = department

    @property
    def role(self):
        """
        Gets the role of this EmployeeApiModel.

        :return: The role of this EmployeeApiModel.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """
        Sets the role of this EmployeeApiModel.

        :param role: The role of this EmployeeApiModel.
        :type: str
        """

        self._role = role

    @property
    def team_start_date(self):
        """
        Gets the team_start_date of this EmployeeApiModel.

        :return: The team_start_date of this EmployeeApiModel.
        :rtype: str
        """
        return self._team_start_date

    @team_start_date.setter
    def team_start_date(self, team_start_date):
        """
        Sets the team_start_date of this EmployeeApiModel.

        :param team_start_date: The team_start_date of this EmployeeApiModel.
        :type: str
        """

        self._team_start_date = team_start_date

    @property
    def company_start_date(self):
        """
        Gets the company_start_date of this EmployeeApiModel.

        :return: The company_start_date of this EmployeeApiModel.
        :rtype: str
        """
        return self._company_start_date

    @company_start_date.setter
    def company_start_date(self, company_start_date):
        """
        Sets the company_start_date of this EmployeeApiModel.

        :param company_start_date: The company_start_date of this EmployeeApiModel.
        :type: str
        """

        self._company_start_date = company_start_date

    @property
    def salary(self):
        """
        Gets the salary of this EmployeeApiModel.

        :return: The salary of this EmployeeApiModel.
        :rtype: int
        """
        return self._salary

    @salary.setter
    def salary(self, salary):
        """
        Sets the salary of this EmployeeApiModel.

        :param salary: The salary of this EmployeeApiModel.
        :type: int
        """

        self._salary = salary

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EmployeeApiModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
